{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R806J62uPgUs"
      },
      "source": [
        "# MPATE-GE 2623 - Music Information Retrieval\n",
        "## Homework 2\n",
        "\n",
        "**Instructions:**\n",
        "\n",
        "1. Complete parts 1 through 5, filling in code in the `utils.py` file where indicated **# YOUR CODE HERE** or responses in `this notebook` where marked with **# YOUR RESPONSE HERE** or **# YOUR CODE HERE**.\n",
        "2. **Document** your code. Add comments explaining what the different parts of your code are doing.\n",
        "3. If you copy code from external resources (e.g. librosa's examples), include references as comments.\n",
        "4. When finished, commit and push this completed notebook file along with the `utils.py` file to your GitHub repository corresponding to this homework.\n",
        "5. IMPORTANT: do not modify any of the provided code except for paths and necessary setup changes for this notebook to run locally.\n",
        "\n",
        "**How to work with the `utils.py` file and Google Colab:**\n",
        "\n",
        "You can run your code remotely with Google Colab if you add the `utils.py` file to your files' folder (search for the folder icon in the menu on the left). But **CAREFUL**, you should copy any changes you make to `utils.py` in Colab to a local copy. Each time you restart a session the changes of any file in the files folder are lost.\n",
        "\n",
        "**Grading:**\n",
        "\n",
        "- This homework is worth 10 points.\n",
        "- Each function you code in `utils.py` is worth 1 point, for a total of 8 points.\n",
        "- Each answer in part 6 is worth 1 point, for a total of 2 points.\n",
        "- Points will be automatically assigned when passing tests (except for the sonifying function), and manually assigned otherwise.\n",
        "\n",
        "**Academic integrity:**\n",
        "\n",
        "Remember that this homework should be authored by you only. It's ok to discuss with classmates but you have to submit your own original solution.\n"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Beat and Downbeat Tracking\n",
        "---\n",
        "\n",
        "In this homework, we'll work on finding the beat and downbeat in a  music piece. Think of the beat as the regular tapping of your foot when you listen to a song, and the downbeat is that tap or clap that starts a music pattern, the first beat of a bar.\n",
        "\n",
        "We'll compare two tools to find the beat. The first tool uses signal processing techniques, while the second tool uses machine learning (in particular deep learning).\n",
        "\n",
        "In the end, we'll see which tool does better by checking their scores using f-measure and other metrics. We'll also see if some types of songs (like rock or jazz) or tempo (fast or slow) make it harder or easier for these tools to find the beat. Happy coding!"
      ],
      "metadata": {
        "id": "DWEFX-rj7ffh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# This two lines of code make your notebook aware of changes in\n",
        "# your utils.py file without needing to restart the session each time\n",
        "%load_ext autoreload\n",
        "%autoreload 2"
      ],
      "metadata": {
        "id": "ZhvPiRxS3dRl"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# We will use mirdata to load and handle the data\n",
        "# See https://mirdata.readthedocs.io/en/stable/source/overview.html\n",
        "#!pip install mirdata # install mirdata\n",
        "!pip install \"mirdata==0.3.8\""
      ],
      "metadata": {
        "id": "438lLs6xBXEf",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "af26b570-6232-4539-f635-65659d8a85b8"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting mirdata==0.3.8\n",
            "  Downloading mirdata-0.3.8-py3-none-any.whl.metadata (6.6 kB)\n",
            "Requirement already satisfied: attrs>=23.1.0 in /usr/local/lib/python3.10/dist-packages (from mirdata==0.3.8) (24.2.0)\n",
            "Collecting black>=23.3.0 (from mirdata==0.3.8)\n",
            "  Downloading black-24.10.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl.metadata (79 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m79.2/79.2 kB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hCollecting chardet>=5.0.0 (from mirdata==0.3.8)\n",
            "  Downloading chardet-5.2.0-py3-none-any.whl.metadata (3.4 kB)\n",
            "Collecting Deprecated>=1.2.14 (from mirdata==0.3.8)\n",
            "  Downloading Deprecated-1.2.15-py2.py3-none-any.whl.metadata (5.5 kB)\n",
            "Requirement already satisfied: h5py>=3.7.0 in /usr/local/lib/python3.10/dist-packages (from mirdata==0.3.8) (3.12.1)\n",
            "Collecting jams>=0.3.4 (from mirdata==0.3.8)\n",
            "  Downloading jams-0.3.4.tar.gz (51 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m51.3/51.3 kB\u001b[0m \u001b[31m3.5 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: librosa>=0.10.1 in /usr/local/lib/python3.10/dist-packages (from mirdata==0.3.8) (0.10.2.post1)\n",
            "Requirement already satisfied: numpy>=1.21.6 in /usr/local/lib/python3.10/dist-packages (from mirdata==0.3.8) (1.26.4)\n",
            "Requirement already satisfied: pandas>=1.3.5 in /usr/local/lib/python3.10/dist-packages (from mirdata==0.3.8) (2.2.2)\n",
            "Collecting pretty-midi>=0.2.10 (from mirdata==0.3.8)\n",
            "  Downloading pretty_midi-0.2.10.tar.gz (5.6 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.6/5.6 MB\u001b[0m \u001b[31m57.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: pyyaml>=6.0 in /usr/local/lib/python3.10/dist-packages (from mirdata==0.3.8) (6.0.2)\n",
            "Requirement already satisfied: requests>=2.31.0 in /usr/local/lib/python3.10/dist-packages (from mirdata==0.3.8) (2.32.3)\n",
            "Requirement already satisfied: scipy>=1.7.3 in /usr/local/lib/python3.10/dist-packages (from mirdata==0.3.8) (1.13.1)\n",
            "Requirement already satisfied: tqdm>=4.66.1 in /usr/local/lib/python3.10/dist-packages (from mirdata==0.3.8) (4.66.6)\n",
            "Requirement already satisfied: click>=8.0.0 in /usr/local/lib/python3.10/dist-packages (from black>=23.3.0->mirdata==0.3.8) (8.1.7)\n",
            "Collecting mypy-extensions>=0.4.3 (from black>=23.3.0->mirdata==0.3.8)\n",
            "  Downloading mypy_extensions-1.0.0-py3-none-any.whl.metadata (1.1 kB)\n",
            "Requirement already satisfied: packaging>=22.0 in /usr/local/lib/python3.10/dist-packages (from black>=23.3.0->mirdata==0.3.8) (24.2)\n",
            "Collecting pathspec>=0.9.0 (from black>=23.3.0->mirdata==0.3.8)\n",
            "  Downloading pathspec-0.12.1-py3-none-any.whl.metadata (21 kB)\n",
            "Requirement already satisfied: platformdirs>=2 in /usr/local/lib/python3.10/dist-packages (from black>=23.3.0->mirdata==0.3.8) (4.3.6)\n",
            "Requirement already satisfied: tomli>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from black>=23.3.0->mirdata==0.3.8) (2.1.0)\n",
            "Requirement already satisfied: typing-extensions>=4.0.1 in /usr/local/lib/python3.10/dist-packages (from black>=23.3.0->mirdata==0.3.8) (4.12.2)\n",
            "Requirement already satisfied: wrapt<2,>=1.10 in /usr/local/lib/python3.10/dist-packages (from Deprecated>=1.2.14->mirdata==0.3.8) (1.14.1)\n",
            "Collecting sortedcontainers>=2.0.0 (from jams>=0.3.4->mirdata==0.3.8)\n",
            "  Downloading sortedcontainers-2.4.0-py2.py3-none-any.whl.metadata (10 kB)\n",
            "Requirement already satisfied: jsonschema>=3.0.0 in /usr/local/lib/python3.10/dist-packages (from jams>=0.3.4->mirdata==0.3.8) (4.23.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from jams>=0.3.4->mirdata==0.3.8) (1.16.0)\n",
            "Requirement already satisfied: decorator in /usr/local/lib/python3.10/dist-packages (from jams>=0.3.4->mirdata==0.3.8) (5.1.1)\n",
            "Collecting mir_eval>=0.5 (from jams>=0.3.4->mirdata==0.3.8)\n",
            "  Downloading mir_eval-0.7.tar.gz (90 kB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m90.7/90.7 kB\u001b[0m \u001b[31m6.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: audioread>=2.1.9 in /usr/local/lib/python3.10/dist-packages (from librosa>=0.10.1->mirdata==0.3.8) (3.0.1)\n",
            "Requirement already satisfied: scikit-learn>=0.20.0 in /usr/local/lib/python3.10/dist-packages (from librosa>=0.10.1->mirdata==0.3.8) (1.5.2)\n",
            "Requirement already satisfied: joblib>=0.14 in /usr/local/lib/python3.10/dist-packages (from librosa>=0.10.1->mirdata==0.3.8) (1.4.2)\n",
            "Requirement already satisfied: numba>=0.51.0 in /usr/local/lib/python3.10/dist-packages (from librosa>=0.10.1->mirdata==0.3.8) (0.60.0)\n",
            "Requirement already satisfied: soundfile>=0.12.1 in /usr/local/lib/python3.10/dist-packages (from librosa>=0.10.1->mirdata==0.3.8) (0.12.1)\n",
            "Requirement already satisfied: pooch>=1.1 in /usr/local/lib/python3.10/dist-packages (from librosa>=0.10.1->mirdata==0.3.8) (1.8.2)\n",
            "Requirement already satisfied: soxr>=0.3.2 in /usr/local/lib/python3.10/dist-packages (from librosa>=0.10.1->mirdata==0.3.8) (0.5.0.post1)\n",
            "Requirement already satisfied: lazy-loader>=0.1 in /usr/local/lib/python3.10/dist-packages (from librosa>=0.10.1->mirdata==0.3.8) (0.4)\n",
            "Requirement already satisfied: msgpack>=1.0 in /usr/local/lib/python3.10/dist-packages (from librosa>=0.10.1->mirdata==0.3.8) (1.1.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.3.5->mirdata==0.3.8) (2.9.0.post0)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.3.5->mirdata==0.3.8) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.3.5->mirdata==0.3.8) (2024.2)\n",
            "Collecting mido>=1.1.16 (from pretty-midi>=0.2.10->mirdata==0.3.8)\n",
            "  Downloading mido-1.3.3-py3-none-any.whl.metadata (6.4 kB)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31.0->mirdata==0.3.8) (3.4.0)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31.0->mirdata==0.3.8) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31.0->mirdata==0.3.8) (2.2.3)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.31.0->mirdata==0.3.8) (2024.8.30)\n",
            "Requirement already satisfied: jsonschema-specifications>=2023.03.6 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0.0->jams>=0.3.4->mirdata==0.3.8) (2024.10.1)\n",
            "Requirement already satisfied: referencing>=0.28.4 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0.0->jams>=0.3.4->mirdata==0.3.8) (0.35.1)\n",
            "Requirement already satisfied: rpds-py>=0.7.1 in /usr/local/lib/python3.10/dist-packages (from jsonschema>=3.0.0->jams>=0.3.4->mirdata==0.3.8) (0.21.0)\n",
            "Collecting future (from mir_eval>=0.5->jams>=0.3.4->mirdata==0.3.8)\n",
            "  Downloading future-1.0.0-py3-none-any.whl.metadata (4.0 kB)\n",
            "Requirement already satisfied: llvmlite<0.44,>=0.43.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba>=0.51.0->librosa>=0.10.1->mirdata==0.3.8) (0.43.0)\n",
            "Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn>=0.20.0->librosa>=0.10.1->mirdata==0.3.8) (3.5.0)\n",
            "Requirement already satisfied: cffi>=1.0 in /usr/local/lib/python3.10/dist-packages (from soundfile>=0.12.1->librosa>=0.10.1->mirdata==0.3.8) (1.17.1)\n",
            "Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.0->soundfile>=0.12.1->librosa>=0.10.1->mirdata==0.3.8) (2.22)\n",
            "Downloading mirdata-0.3.8-py3-none-any.whl (17.2 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m17.2/17.2 MB\u001b[0m \u001b[31m53.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading black-24.10.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_28_x86_64.whl (1.8 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m1.8/1.8 MB\u001b[0m \u001b[31m48.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading chardet-5.2.0-py3-none-any.whl (199 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m199.4/199.4 kB\u001b[0m \u001b[31m12.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading Deprecated-1.2.15-py2.py3-none-any.whl (9.9 kB)\n",
            "Downloading mido-1.3.3-py3-none-any.whl (54 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m54.6/54.6 kB\u001b[0m \u001b[31m3.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading mypy_extensions-1.0.0-py3-none-any.whl (4.7 kB)\n",
            "Downloading pathspec-0.12.1-py3-none-any.whl (31 kB)\n",
            "Downloading sortedcontainers-2.4.0-py2.py3-none-any.whl (29 kB)\n",
            "Downloading future-1.0.0-py3-none-any.whl (491 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m491.3/491.3 kB\u001b[0m \u001b[31m24.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hBuilding wheels for collected packages: jams, pretty-midi, mir_eval\n",
            "  Building wheel for jams (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for jams: filename=jams-0.3.4-py3-none-any.whl size=64901 sha256=4381bd22f1fabdbbf92f65d75c0c9e3c990b6bc020d52c629a29aea9aa310bc6\n",
            "  Stored in directory: /root/.cache/pip/wheels/28/9a/f7/fb386b6bc5a75a3ef198a50e98b221e94a381472332b65cf24\n",
            "  Building wheel for pretty-midi (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for pretty-midi: filename=pretty_midi-0.2.10-py3-none-any.whl size=5592287 sha256=e027a8fd6855f2f9159c2f3e07b54f1b5347e3a96886eccb54ca68f238d126e7\n",
            "  Stored in directory: /root/.cache/pip/wheels/cd/a5/30/7b8b7f58709f5150f67f98fde4b891ebf0be9ef07a8af49f25\n",
            "  Building wheel for mir_eval (setup.py) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for mir_eval: filename=mir_eval-0.7-py3-none-any.whl size=100699 sha256=cf9fea583713d92ee8f256d3bebf6d457eb4a8c33ad324fed6fa955c0e8c4019\n",
            "  Stored in directory: /root/.cache/pip/wheels/3e/2f/0d/dda9c4c77a170e21356b6afa2f7d9bb078338634ba05d94e3f\n",
            "Successfully built jams pretty-midi mir_eval\n",
            "Installing collected packages: sortedcontainers, pathspec, mypy-extensions, mido, future, Deprecated, chardet, pretty-midi, mir_eval, black, jams, mirdata\n",
            "Successfully installed Deprecated-1.2.15 black-24.10.0 chardet-5.2.0 future-1.0.0 jams-0.3.4 mido-1.3.3 mir_eval-0.7 mirdata-0.3.8 mypy-extensions-1.0.0 pathspec-0.12.1 pretty-midi-0.2.10 sortedcontainers-2.4.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# We will use madmom as our deep learning method (me da error, mejor descargar package desde github como en la celda siguiente)\n",
        "# See https://madmom.readthedocs.io/en/v0.16/introduction.html\n",
        "# !pip install madmom # install madmom"
      ],
      "metadata": {
        "id": "d7Tuk-EAEAyX",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1e6ac5b7-2854-44d5-c464-3aa66866f815"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting madmom\n",
            "  Downloading madmom-0.16.1.tar.gz (20.0 MB)\n",
            "\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m20.0/20.0 MB\u001b[0m \u001b[31m68.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25h  \u001b[1;31merror\u001b[0m: \u001b[1msubprocess-exited-with-error\u001b[0m\n",
            "  \n",
            "  \u001b[31m×\u001b[0m \u001b[32mpython setup.py egg_info\u001b[0m did not run successfully.\n",
            "  \u001b[31m│\u001b[0m exit code: \u001b[1;36m1\u001b[0m\n",
            "  \u001b[31m╰─>\u001b[0m See above for output.\n",
            "  \n",
            "  \u001b[1;35mnote\u001b[0m: This error originates from a subprocess, and is likely not a problem with pip.\n",
            "  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25herror\n",
            "\u001b[1;31merror\u001b[0m: \u001b[1mmetadata-generation-failed\u001b[0m\n",
            "\n",
            "\u001b[31m×\u001b[0m Encountered error while generating package metadata.\n",
            "\u001b[31m╰─>\u001b[0m See above for output.\n",
            "\n",
            "\u001b[1;35mnote\u001b[0m: This is an issue with the package mentioned above, not pip.\n",
            "\u001b[1;36mhint\u001b[0m: See above for details.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install git+https://github.com/CPJKU/madmom"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mybBKMgRtqol",
        "outputId": "596d5fea-35e6-4dbe-bb4c-d5fcf6b93b03"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting git+https://github.com/CPJKU/madmom\n",
            "  Cloning https://github.com/CPJKU/madmom to /tmp/pip-req-build-_51og79l\n",
            "  Running command git clone --filter=blob:none --quiet https://github.com/CPJKU/madmom /tmp/pip-req-build-_51og79l\n",
            "  Resolved https://github.com/CPJKU/madmom to commit 27f032e8947204902c675e5e341a3faf5dc86dae\n",
            "  Running command git submodule update --init --recursive -q\n",
            "  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n",
            "  Installing backend dependencies ... \u001b[?25l\u001b[?25hdone\n",
            "  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n",
            "Requirement already satisfied: numpy>=1.13.4 in /usr/local/lib/python3.10/dist-packages (from madmom==0.17.dev0) (1.26.4)\n",
            "Requirement already satisfied: scipy>=1.13 in /usr/local/lib/python3.10/dist-packages (from madmom==0.17.dev0) (1.13.1)\n",
            "Requirement already satisfied: mido>=1.2.6 in /usr/local/lib/python3.10/dist-packages (from madmom==0.17.dev0) (1.3.3)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.10/dist-packages (from mido>=1.2.6->madmom==0.17.dev0) (24.2)\n",
            "Building wheels for collected packages: madmom\n",
            "  Building wheel for madmom (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n",
            "  Created wheel for madmom: filename=madmom-0.17.dev0-cp310-cp310-linux_x86_64.whl size=25971488 sha256=5ac044358ab369b28088a3843172752a2f07f3016aa1bd3a5634cca43b658185\n",
            "  Stored in directory: /tmp/pip-ephem-wheel-cache-kko9xq69/wheels/f0/d9/ca/1cb22bf4e6271d2b8077aa11b585b4a51a83c7c08fa37f87ff\n",
            "Successfully built madmom\n",
            "Installing collected packages: madmom\n",
            "Successfully installed madmom-0.17.dev0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# This is a patch needed for madmom to work on python 3.10\n",
        "!sed -i 's/from collections import MutableSequence/from collections.abc import MutableSequence/g' /usr/local/lib/python3.10/dist-packages/madmom/processors.py\n"
      ],
      "metadata": {
        "id": "jWdjKIHptfJ3"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import madmom"
      ],
      "metadata": {
        "id": "gi_l8GkWl_Pe"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# This snippet mounts your Drive so you can work with the dataset in it\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive/')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Ewqtb7RyuFsy",
        "outputId": "680e521f-b8ca-49ad-d09b-f569f6ecffd7"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive/\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import os\n",
        "os.chdir('/content/drive/MyDrive/MIR/HW2/')"
      ],
      "metadata": {
        "id": "j4shn5TauMCD"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# This notebook is for visualization and written answers only\n",
        "# Your code should go in utils.py\n",
        "import utils as u # to use the functions from utils, do u.function()"
      ],
      "metadata": {
        "id": "RpP1tpYZDMnh"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# This is a file with auxiliary functions provided for you to use\n",
        "import auxiliary as a # DO NOT MODIFY THIS FILE"
      ],
      "metadata": {
        "id": "lLCMPrS_stB4"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Fix the random seed for reproducibility\n",
        "from numpy.random import seed\n",
        "seed(123)"
      ],
      "metadata": {
        "id": "SqPxykaCTSTc"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Vv-fAeKIPgUu"
      },
      "source": [
        "## Part 1: Initialize loader, download and load the data using mirdata\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GtTHGEpZPgUt"
      },
      "source": [
        "For this assignment we will use the GTZAN-genre (mini) dataset, which is a smaller version of the following dataset:\n",
        "\n",
        "<blockquote>\n",
        "\"Musical genre classification of audio signals \" by G. Tzanetakis and\n",
        "P. Cook in IEEE Transactions on Audio and Speech Processing, 2002.\n",
        "</blockquote>\n",
        "\n",
        "This dataset is fully downloadable using `mirdata`. To obtain this dataset follow the instructions below. Since we are not trainig any model in this dataset, we will use it entirely for evaluation."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import mirdata"
      ],
      "metadata": {
        "id": "XNuiSMACE-xR"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip freeze | grep mirdata"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gfpOohaVgF72",
        "outputId": "9014f06f-a392-4a8a-c0b2-e4887b12770d"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "mirdata==0.3.8\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "yuZrP2R4PgUu",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ad256747-ab33-4c4d-a9bf-c47c383131f5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 100/100 [00:27<00:00,  3.58it/s]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "100\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(array([-0.0249939 , -0.01815796, -0.02023315, ..., -0.36505127,\n",
              "        -0.4237976 , -0.42385864], dtype=float32),\n",
              " 22050)"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "data_home = '/content/drive/MyDrive/MIR/mir_datasets/' # here the location you want the data to be in your Drive\n",
        "dataset_name = 'gtzan_genre'\n",
        "dataset_version = 'mini'\n",
        "dataset = u.load_data(dataset_name, data_home=data_home, dataset_version=dataset_version)\n",
        "\n",
        "# Uncomment the following line and run the download code once to download the data\n",
        "# dataset.download()\n",
        "\n",
        "# Uncomment the following line and run the validate code to check the data is correct\n",
        "dataset.validate()\n",
        "\n",
        "# Check how many tracks and load a random track\n",
        "print(len(dataset.track_ids))\n",
        "dataset.choice_track().audio"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Part 2: Estimate Beats\n",
        "\n",
        "Write a function that estimates beat positions using the spectral flux onset novelty curve, a tempogram, and PLP. Most of this is already implemented in librosa, but you need to put the pieces together. Read the documentation carefully. You can use the default parameters from librosa's functions, but be careful to look at what they are so you compute the time stamps correctly.\n",
        "\n",
        "Code to compute the beats using madmom, a deep-learning based library for rhythm analysis, is provided to you for comparison.\n",
        "\n",
        "---\n",
        "\n",
        "From now on in this assignment, \"SF\" refers to beats estimated using `'spectral_flux'`, and \"ML\" refers to beats estimated using `'madmom'`.\n",
        "\n",
        "---\n",
        "\n",
        "You should primarily rely on the `librosa.beat.plp` function, and the [examples in the documentation](https://librosa.github.io/librosa/generated/librosa.beat.plp.html#librosa.beat.plp).\n",
        "\n",
        "The relevant madmom documentation is [here](https://madmom.readthedocs.io/en/latest/modules/features/beats.html#module-madmom.features.beats).\n",
        "\n",
        "</div>"
      ],
      "metadata": {
        "id": "xD_GDhjP8UF7"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# run this code to test your function\n",
        "example_track = dataset.track(\"rock.00007\")\n",
        "print(\"Estimating beats with a spectral flux novelty function...\")\n",
        "example_beats_sf, novelty_sf = u.estimate_beats_spectral_flux(example_track.audio_path)\n",
        "print(f\"The first 5 detected SF beats are at {example_beats_sf[:5]}\")\n",
        "print(\" \")\n",
        "print(\"Estimating beats with a machine learned activation function...\")\n",
        "example_beats_ml, novelty_ml = a.estimate_beats_madmom(example_track.audio_path)\n",
        "print(f\"The first 5 detected ML beats are at {example_beats_ml[:5]}\")"
      ],
      "metadata": {
        "id": "UEvLXj1tdml5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1ccf1e98-2ed3-46fa-d637-5135cbaf7b59"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Estimating beats with a spectral flux novelty function...\n",
            "22050\n",
            "[0.         0.         0.         ... 0.5917204  0.613567   0.88903874]\n",
            "[  39   68   96  125  155  185  213  243  272  301  329  358  387  416\n",
            "  445  475  503  532  561  590  618  647  677  705  734  763  791  819\n",
            "  848  877  905  934  962  991 1020 1048 1078 1106 1136 1166 1194 1223\n",
            " 1252 1281]\n",
            "(44,)\n",
            "The first 5 detected SF beats are at [0.90557823 1.57895692 2.22911565 2.90249433 3.59909297]\n",
            " \n",
            "Estimating beats with a machine learned activation function...\n",
            "The first 5 detected ML beats are at [0.19 0.86 1.54 2.19 2.88]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qvr3khZgPgUy"
      },
      "source": [
        "## Part 3: Evaluate Beats\n",
        "\n",
        "<div class=\"alert alert-block alert-success\">\n",
        "\n",
        "Evaluate the beat estimates for each track in GTZAN using `mir_eval.beat.f_measure`. Do this by creating two dictionaries, one for SF beats and one for the ML beats. The keys of the dictionaries should be the gtzan track ids (`dataset.track_ids()`), and the value for each key should be the f-measure.\n",
        "\n",
        "---\n",
        "\n",
        "For a `dataset.track` object called `example_track`, you can access the ground truth beats by calling\n",
        "`example_track.beats.times`.\n",
        "\n",
        "</div>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# This loads all gtzan Track objects into a dictionary (data) which has track_ids as keys\n",
        "data = dataset.load_tracks() # Original HW2 code\n",
        "# data = dataset[0:1] # Codigo de Joseph\n",
        "print(\"GTZAN mini has {} tracks.\\n\".format(len(data)))\n",
        "print(data[\"rock.00007\"])"
      ],
      "metadata": {
        "id": "2b0Wo5DvWnEB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6e6d2d36-35ca-4b27-f3e8-a82d71c010f9"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "GTZAN mini has 100 tracks.\n",
            "\n",
            "Track(\n",
            "  audio_path=\"/content/drive/MyDrive/MIR/mir_datasets/gtzan_mini-main/genres/rock/rock.00007.wav\",\n",
            "  beats_path=\"/content/drive/MyDrive/MIR/mir_datasets/gtzan_tempo_beat-main/beats/gtzan_rock_00007.beats\",\n",
            "  genre=\"rock\",\n",
            "  tempo_path=\"/content/drive/MyDrive/MIR/mir_datasets/gtzan_tempo_beat-main/tempo/gtzan_rock_00007.bpm\",\n",
            "  track_id=\"rock.00007\",\n",
            "  audio: The track's audio\n",
            "\n",
            "        Returns,\n",
            "  beats: ,\n",
            "  tempo: ,\n",
            ")\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "estimated_beats_sf = a.get_estimated_beats(data, \"spectral_flux\")\n",
        "scores_sf = u.evaluate_estimated_beats(data, estimated_beats_sf)\n",
        "\n",
        "estimated_beats_ml = a.get_estimated_beats(data, \"machine_learning\")\n",
        "scores_ml = u.evaluate_estimated_beats(data, estimated_beats_ml)"
      ],
      "metadata": {
        "id": "p2RAJXqmXNR0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "daa470e9-7df6-47ad-d134-708e8f731db7"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "22050\n",
            "[0.         0.         0.         ... 1.0691161  0.6168977  0.49896485]\n",
            "[ 146  173  201  229  256  282  309  335  364  393  420  447  474  501\n",
            "  528  556  584  612  640  666  694  719  748  775  802  829  856  883\n",
            "  911  938  966  994 1022 1050 1078 1106 1133 1161 1189 1217 1245 1269]\n",
            "(42,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.77951527 0.9030396  0.63557917]\n",
            "[  27   50   70   91  113  135  158  180  201  223  245  263  282  302\n",
            "  323  345  370  391  413  435  456  479  502  522  545  569  593  613\n",
            "  635  656  677  699  723  745  769  792  817  843  866  890  911  934\n",
            "  955  978 1001 1027 1053 1076 1099 1123 1145 1167 1188 1211 1233 1257\n",
            " 1275]\n",
            "(57,)\n",
            "22050\n",
            "[0.        0.        0.        ... 1.5305109 2.5822837 2.2756093]\n",
            "[  38   64   89  114  142  168  194  219  245  270  295  322  348  375\n",
            "  402  429  456  481  507  533  560  586  612  638  665  691  717  743\n",
            "  769  795  821  846  872  898  924  951  977 1003 1029 1055 1081 1108\n",
            " 1135 1160 1187 1213 1239 1265]\n",
            "(48,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.74473006 0.95510197 0.74806476]\n",
            "[  43   60   78   97  117  134  152  172  191  209  227  247  269  289\n",
            "  308  328  348  366  385  404  423  443  462  479  499  518  539  557\n",
            "  575  593  612  631  651  671  689  708  725  743  760  777  796  814\n",
            "  833  851  870  887  904  923  941  960  979  998 1016 1033 1051 1070\n",
            " 1089 1107 1125 1145 1164 1182 1199 1219 1238 1256 1274]\n",
            "(67,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.6463423  0.50566816 1.0431603 ]\n",
            "[  33   55   81  106  129  154  177  202  226  249  272  296  320  346\n",
            "  369  393  417  441  465  488  511  534  558  582  606  629  653  677\n",
            "  700  724  748  772  796  821  844  867  891  916  940  964  988 1012\n",
            " 1033 1055 1078 1102 1126 1149 1173 1197 1221 1245 1268]\n",
            "(53,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.5707407  0.58872014 0.5386268 ]\n",
            "[ 133  151  170  188  206  224  242  259  277  293  309  326  344  363\n",
            "  382  400  419  438  456  475  493  511  529  547  565  585  604  622\n",
            "  641  660  679  698  717  735  754  773  791  809  827  846  864  882\n",
            "  900  919  937  955  972  989 1007 1025 1042 1060 1079 1099 1119 1139\n",
            " 1158 1175 1193 1210 1226 1241 1259 1275]\n",
            "(64,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.41198987 0.7765135  0.85998464]\n",
            "[   9   36   63   92  119  144  171  198  223  253  281  308  332  359\n",
            "  385  410  434  457  482  508  536  563  593  620  647  674  699  727\n",
            "  754  781  807  831  857  884  909  934  962  990 1014 1040 1065 1092\n",
            " 1120 1148 1171 1195 1218 1241 1266]\n",
            "(49,)\n",
            "22050\n",
            "[0.         0.         0.         ... 2.0578365  1.1536685  0.90778506]\n",
            "[  11   37   61   85  110  134  156  179  203  227  251  276  299  321\n",
            "  345  370  394  420  444  467  490  514  538  561  585  609  631  655\n",
            "  680  703  726  749  772  797  822  847  873  897  924  949  973  999\n",
            " 1023 1047 1071 1094 1119 1144 1167 1192 1217 1242 1266 1289]\n",
            "(54,)\n",
            "22050\n",
            "[0.        0.        0.        ... 0.8683897 0.697655  0.6273051]\n",
            "[  39   59   78   99  119  138  157  177  196  214  234  253  271  289\n",
            "  307  325  343  361  379  398  418  440  462  485  505  525  544  564\n",
            "  583  602  622  641  660  678  696  715  733  752  771  789  808  828\n",
            "  847  865  883  901  921  941  959  978  998 1016 1035 1054 1072 1090\n",
            " 1109 1128 1147 1165 1183 1201 1220 1240 1258 1275]\n",
            "(66,)\n",
            "22050\n",
            "[0.         0.         0.         ... 1.4725146  1.1062243  0.75351876]\n",
            "[  21   39   57   77   99  118  136  155  176  194  213  231  249  268\n",
            "  286  308  330  350  371  393  414  434  455  475  494  513  533  553\n",
            "  573  592  610  630  650  670  690  709  728  746  764  783  805  825\n",
            "  845  865  884  904  924  944  963  982 1002 1021 1040 1058 1077 1097\n",
            " 1117 1137 1156 1175 1194 1214 1233 1253 1272 1290]\n",
            "(66,)\n",
            "22050\n",
            "[0.        0.        0.        ... 1.427625  0.7131296 1.741474 ]\n",
            "[   6   22   37   53   68   83   98  114  129  145  161  175  190  205\n",
            "  221  236  252  267  282  297  312  327  342  358  374  390  405  420\n",
            "  435  450  465  481  495  511  527  542  558  573  588  603  618  634\n",
            "  649  664  680  695  711  726  741  755  770  786  802  818  833  848\n",
            "  863  879  895  910  925  940  955  970  985 1001 1016 1031 1047 1063\n",
            " 1078 1093 1108 1123 1139 1154 1169 1185 1200 1215 1230 1245 1261 1277]\n",
            "(84,)\n",
            "22050\n",
            "[0.        0.        0.        ... 0.5735185 1.0065038 1.2298528]\n",
            "[  61   80  100  120  140  160  180  200  220  241  260  281  301  321\n",
            "  341  361  381  401  421  441  462  482  502  522  542  562  582  602\n",
            "  622  642  662  682  702  722  742  762  782  801  821  842  862  882\n",
            "  902  922  942  962  982 1002 1022 1043 1062 1082 1102 1122 1143 1163\n",
            " 1183 1203 1219 1235 1253 1273]\n",
            "(62,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.2736823  0.22866362 0.50283414]\n",
            "[  23   40   57   72   88  104  120  136  152  168  183  199  215  231\n",
            "  247  262  279  295  310  326  341  357  373  389  405  421  437  452\n",
            "  468  483  500  514  531  546  561  578  594  609  625  641  657  672\n",
            "  687  703  718  734  750  766  781  797  814  829  845  860  876  892\n",
            "  908  925  941  956  972  987 1003 1018 1034 1050 1066 1082 1098 1113\n",
            " 1130 1145 1162 1177 1194 1209 1225 1240 1256 1272 1288 1303]\n",
            "(82,)\n",
            "22050\n",
            "[0.        0.        0.        ... 3.0681372 0.6327431 0.7527579]\n",
            "[  61   76   93  109  126  143  159  175  191  208  224  240  256  272\n",
            "  288  304  321  338  353  369  384  401  417  434  450  466  482  498\n",
            "  514  530  546  563  579  595  611  627  644  660  676  692  708  725\n",
            "  741  758  774  790  806  821  838  854  870  886  902  918  934  950\n",
            "  966  982  998 1015 1031 1047 1063 1079 1095 1111 1127 1143 1159 1175\n",
            " 1191]\n",
            "(71,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.96914124 1.487494   0.75794154]\n",
            "[   3   25   46   68   90  112  134  156  178  200  222  244  265  287\n",
            "  309  331  353  376  397  419  441  462  484  507  529  551  573  596\n",
            "  618  640  662  684  706  728  750  773  795  817  839  861  883  904\n",
            "  926  949  971  992 1014 1036 1058 1080 1102 1124 1146 1168 1190 1211\n",
            " 1230 1250 1270]\n",
            "(59,)\n",
            "22050\n",
            "[0.        0.        0.        ... 1.0146718 1.0183605 0.8223357]\n",
            "[   8   27   48   68   88  107  127  147  167  187  207  226  246  266\n",
            "  285  305  325  345  364  384  404  424  444  464  484  504  523  543\n",
            "  563  583  602  622  642  662  682  701  722  742  761  781  801  821\n",
            "  841  861  880  900  920  940  959  979 1000 1020 1039 1059 1079 1099\n",
            " 1119 1138 1158 1178 1197 1217 1237 1257 1277 1297]\n",
            "(66,)\n",
            "22050\n",
            "[0.        0.        0.        ... 3.1521738 1.3019922 2.6136448]\n",
            "[   7   31   54   77  100  124  147  170  193  216  239  262  286  309\n",
            "  332  355  379  402  425  448  471  495  518  542  565  588  611  634\n",
            "  657  680  704  727  749  773  796  819  842  866  889  912  935  958\n",
            "  981 1005 1028 1051 1075 1098 1121 1144 1167 1190 1213 1237 1259 1283\n",
            " 1304]\n",
            "(57,)\n",
            "22050\n",
            "[0.        0.        0.        ... 1.5904086 1.4633749 1.1767601]\n",
            "[  10   35   60   86  113  138  164  191  215  241  267  292  318  343\n",
            "  369  395  420  445  470  497  522  548  573  599  624  650  676  702\n",
            "  727  752  777  803  828  853  879  905  931  955  981 1007 1033 1057\n",
            " 1084 1110 1136 1161 1187 1212 1238 1263]\n",
            "(50,)\n",
            "22050\n",
            "[0.        0.        0.        ... 3.2518368 2.7626984 0.6954353]\n",
            "[  27   47   66   86  105  125  144  164  184  203  222  241  261  281\n",
            "  300  320  339  359  378  398  417  437  456  476  495  515  534  553\n",
            "  573  593  612  631  651  671  690  709  729  748  768  788  807  827\n",
            "  846  866  885  905  924  943  963  983 1002 1022 1041 1061 1079 1099\n",
            " 1118 1138 1158 1178 1197 1217 1236 1256 1275 1294]\n",
            "(66,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.9770246  1.2034347  0.96852195]\n",
            "[   5   24   44   65   85  106  125  146  165  185  204  224  245  265\n",
            "  285  305  326  348  370  391  411  433  453  473  492  513  533  553\n",
            "  573  593  613  633  653  673  695  717  740  760  780  799  819  840\n",
            "  861  882  901  920  941  962  981 1001 1021 1040 1061 1081 1101 1124\n",
            " 1146 1168 1189 1208 1230 1252 1274]\n",
            "(63,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.12903607 1.6451168  1.8732975 ]\n",
            "[  10   33   56   78  101  123  146  168  190  214  236  258  281  303\n",
            "  325  348  371  393  416  438  460  483  505  528  550  572  595  617\n",
            "  639  662  684  706  728  751  773  795  817  840  862  885  908  930\n",
            "  953  975  998 1020 1042 1065 1088 1111 1133 1156 1178 1201 1223 1246]\n",
            "(56,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.44029486 1.6040002  1.5514705 ]\n",
            "[  46   68   90  112  134  156  178  200  223  245  267  289  311  333\n",
            "  356  378  400  422  444  466  488  510  532  554  576  598  620  642\n",
            "  664  686  708  730  753  775  797  819  841  863  885  907  930  952\n",
            "  974  996 1018 1040 1063 1085 1107 1129 1151 1173 1195 1217 1239 1261]\n",
            "(56,)\n",
            "22050\n",
            "[0.        0.        0.        ... 0.4965668 1.226557  2.118926 ]\n",
            "[   6   29   52   75   97  125  148  171  198  221  243  266  288  311\n",
            "  334  356  379  401  424  447  469  492  514  537  559  582  604  627\n",
            "  649  672  695  717  740  762  785  808  830  853  881  909  932  955\n",
            "  977 1000 1022 1045 1067 1089 1113 1135 1158 1180 1203 1225 1248 1270]\n",
            "(56,)\n",
            "22050\n",
            "[0.        0.        0.        ... 2.847552  1.5340452 0.9481581]\n",
            "[   4   24   45   65   86  106  127  147  167  188  209  229  249  270\n",
            "  290  311  331  351  371  392  412  432  453  473  494  514  534  554\n",
            "  575  595  616  637  657  678  698  718  739  760  780  801  821  842\n",
            "  862  883  903  923  943  964  985 1005 1025 1046 1066 1087 1107 1128\n",
            " 1148 1169 1189 1209 1230 1250 1270 1287]\n",
            "(64,)\n",
            "22050\n",
            "[0.         0.         0.         ... 1.0476713  0.36545888 0.43800187]\n",
            "[   6   28   49   71   92  113  135  156  178  199  220  241  263  285\n",
            "  306  327  348  370  391  412  434  455  477  498  519  540  561  582\n",
            "  604  626  647  668  689  711  732  754  775  797  818  839  861  882\n",
            "  904  926  948  969  990 1011 1033 1054 1075 1096 1118 1139 1160 1181\n",
            " 1203 1224 1245]\n",
            "(59,)\n",
            "22050\n",
            "[0.         0.         0.         ... 1.1180909  0.9671861  0.64234304]\n",
            "[  24   48   72   97  121  146  170  194  217  240  263  287  312  336\n",
            "  360  384  407  431  455  479  503  527  550  575  598  622  645  669\n",
            "  693  717  741  765  788  813  837  861  884  908  932  956  980 1004\n",
            " 1027 1051 1075 1099 1124 1147 1171 1194 1217 1240 1261]\n",
            "(53,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.98520094 0.92307067 0.9240791 ]\n",
            "[  31   52   73   94  115  135  156  177  198  219  240  261  281  302\n",
            "  323  344  365  386  407  428  449  470  491  512  533  554  575  596\n",
            "  616  637  657  678  699  719  740  761  782  803  824  845  866  887\n",
            "  908  929  950  970  991 1011 1032 1054 1075 1096 1116 1137 1158 1179\n",
            " 1200 1220 1241 1262 1283]\n",
            "(61,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.89730763 1.0001796  1.0232961 ]\n",
            "[  57   77   97  117  137  157  177  197  217  237  257  277  297  317\n",
            "  337  357  377  397  417  437  457  477  497  517  537  557  577  597\n",
            "  617  637  657  677  697  717  737  757  776  796  816  837  857  877\n",
            "  896  916  936  956  976  996 1016 1036 1056 1076 1096 1116 1136 1156\n",
            " 1176 1196 1216 1236 1256 1276]\n",
            "(62,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.87440944 0.32988793 3.0538259 ]\n",
            "[   5   27   48   69   90  110  132  153  175  196  218  239  260  281\n",
            "  303  324  346  367  388  409  430  451  473  494  515  537  558  579\n",
            "  600  621  642  663  684  705  726  748  768  789  811  832  854  875\n",
            "  897  918  939  960  982 1003 1025 1046 1068 1089 1111 1132 1153 1174\n",
            " 1196]\n",
            "(57,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.49963146 0.98399884 3.474709  ]\n",
            "[  21   41   61   81  101  121  141  161  181  201  221  241  261  281\n",
            "  301  321  340  360  381  401  421  441  461  481  501  521  541  561\n",
            "  581  601  621  641  661  681  701  721  741  761  781  802  821  842\n",
            "  862  882  902  921  941  961  981 1001 1021 1041 1061 1081 1101 1121\n",
            " 1141 1161 1181 1201 1221]\n",
            "(61,)\n",
            "22050\n",
            "[0.         0.         0.         ... 3.524006   0.40636313 0.25863203]\n",
            "[  75   96  118  140  162  183  205  227  248  269  292  314  335  357\n",
            "  378  400  421  443  465  486  508  529  551  573  594  616  638  660\n",
            "  681  703  725  747  768  790  812  833  854  876  898  920  941  963\n",
            "  985 1007 1029 1050 1072 1094 1115 1137 1159 1180 1202 1224 1245 1267\n",
            " 1289]\n",
            "(57,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.5069014  0.12651879 0.2131917 ]\n",
            "[  33   60   87  111  135  161  191  219  248  276  305  332  362  390\n",
            "  419  447  475  504  533  562  589  617  646  673  698  727  758  786\n",
            "  816  843  873  901  929  958  987 1015 1043 1071 1100 1128 1157 1184\n",
            " 1214 1240]\n",
            "(44,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.9612811  0.55792207 1.1255338 ]\n",
            "[  33   59   85  111  136  162  189  216  241  267  293  320  345  372\n",
            "  400  425  449  475  502  528  553  579  606  631  657  683  709  735\n",
            "  761  787  813  839  865  891  917  943  969  995 1021 1047 1073 1100\n",
            " 1126 1152 1177 1203 1230 1257 1282]\n",
            "(49,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.61848783 0.65176535 0.5361652 ]\n",
            "[  78  106  133  161  189  216  244  272  300  328  355  383  411  439\n",
            "  466  494  522  550  578  605  633  661  688  716  744  772  800  828\n",
            "  855  883  910  938  966  994 1022 1050 1077 1105 1133 1160 1188 1216\n",
            " 1244]\n",
            "(43,)\n",
            "22050\n",
            "[0.        0.        0.        ... 0.9152809 1.6954389 2.4771745]\n",
            "[  44   71   98  124  151  178  205  231  258  284  311  337  364  391\n",
            "  418  444  471  498  525  551  578  605  632  658  685  711  738  765\n",
            "  792  818  845  872  898  925  952  978 1005 1032 1059 1085 1112 1138\n",
            " 1165 1192 1218 1243 1267]\n",
            "(47,)\n",
            "22050\n",
            "[0.        0.        0.        ... 1.7375569 1.7114942 0.8163711]\n",
            "[  18   36   54   73   91  109  127  146  164  182  200  219  237  255\n",
            "  273  293  310  328  346  365  383  401  419  437  456  474  492  510\n",
            "  529  547  566  584  602  620  638  657  675  693  712  730  748  766\n",
            "  785  803  821  839  858  876  894  912  931  949  967  986 1003 1021\n",
            " 1040 1058 1077 1095 1113 1131 1150 1169 1187 1205 1223 1240 1257 1274]\n",
            "(70,)\n",
            "22050\n",
            "[0.        0.        0.        ... 9.683613  8.347653  0.7873806]\n",
            "[  23   49   75  101  126  153  179  204  230  256  282  307  333  359\n",
            "  385  411  437  463  489  514  540  566  592  618  644  670  696  721\n",
            "  747  773  799  825  851  877  903  929  954  980 1006 1032 1058 1084\n",
            " 1110 1135 1161 1187 1213 1239 1264]\n",
            "(49,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.87615836 0.16852938 0.12793368]\n",
            "[  16   37   58   80  101  123  144  165  186  208  229  250  272  293\n",
            "  314  336  357  379  400  421  443  464  485  507  529  550  571  592\n",
            "  614  635  656  678  699  720  742  764  784  804  827  849  870  892\n",
            "  913  934  956  978  999 1020 1040 1063 1084 1106 1127 1148 1169 1191\n",
            " 1212 1234 1254 1273]\n",
            "(60,)\n",
            "22050\n",
            "[0.        0.        0.        ... 1.5452485 1.863169  1.1653152]\n",
            "[   4   19   35   51   66   80   94  109  126  143  159  175  190  206\n",
            "  221  236  251  267  282  297  312  328  343  359  374  389  404  420\n",
            "  435  450  466  480  494  511  526  542  558  572  588  604  619  634\n",
            "  650  665  681  696  712  727  742  757  773  788  803  817  833  848\n",
            "  863  878  893  910  926  942  957  972  988 1003 1018 1034 1049 1064\n",
            " 1080 1095 1110 1125 1141 1157 1172 1187 1203 1218 1233 1248]\n",
            "(82,)\n",
            "22050\n",
            "[0.        0.        0.        ... 1.2924476 1.2309486 3.6960545]\n",
            "[  11   41   66   91  116  141  166  191  216  242  267  291  313  337\n",
            "  361  391  416  442  467  491  516  541  567  592  617  643  668  692\n",
            "  717  742  768  792  818  843  868  893  917  942  968  993 1018 1043\n",
            " 1069 1093 1118 1144 1170 1194 1218 1244 1268]\n",
            "(51,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.6290084  0.44464833 0.42366138]\n",
            "[  24   45   65   86  106  127  147  168  188  209  228  248  269  289\n",
            "  307  331  350  371  391  411  431  451  474  496  516  539  561  583\n",
            "  605  627  649  671  693  714  734  754  771  788  809  829  850  871\n",
            "  891  912  933  952  971  989 1009 1030 1051 1072 1092 1115 1136 1158\n",
            " 1180 1202 1224 1244 1266]\n",
            "(61,)\n",
            "22050\n",
            "[0.        0.        0.        ... 2.1488423 3.7800636 3.1152766]\n",
            "[   7   27   47   69   88  107  126  145  164  183  202  221  239  257\n",
            "  276  295  313  332  351  370  390  409  428  447  466  484  502  519\n",
            "  537  557  575  593  611  628  645  665  684  703  722  741  760  778\n",
            "  797  818  836  855  873  893  912  931  950  969  986 1005 1024 1043\n",
            " 1061 1081 1099 1117 1137 1154 1175 1196 1215 1235 1254 1273 1291]\n",
            "(69,)\n",
            "22050\n",
            "[0.        0.        0.        ... 0.4676609 0.3882705 0.4845405]\n",
            "[   5   28   51   75   98  122  148  172  196  218  240  262  284  307\n",
            "  331  358  384  409  434  462  487  510  534  558  582  606  629  652\n",
            "  674  697  720  742  765  789  814  839  864  888  910  933  956  982\n",
            " 1006 1031 1056 1082 1108 1133 1158 1185 1209 1234 1258]\n",
            "(53,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.36335889 0.938011   2.6531563 ]\n",
            "[  43   68   96  124  151  178  208  237  262  293  320  346  374  400\n",
            "  427  450  475  500  527  554  581  607  636  665  692  718  744  771\n",
            "  802  832  861  889  918  941  966  990 1016 1041 1069 1100 1126 1155\n",
            " 1183 1211 1239 1267]\n",
            "(46,)\n",
            "22050\n",
            "[0.        0.        0.        ... 3.3073993 2.1298041 2.0952256]\n",
            "[  88  112  136  161  186  210  236  259  286  310  335  359  381  404\n",
            "  427  450  472  495  518  541  565  588  611  635  659  682  707  730\n",
            "  755  780  803  828  852  879  908  934  958  982 1007 1031 1051 1071\n",
            " 1092 1115 1140 1163 1187 1207 1231 1255]\n",
            "(50,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.18993661 0.4957455  0.29368883]\n",
            "[  21   41   60   80   99  119  138  157  176  194  211  229  247  267\n",
            "  287  306  326  346  367  390  410  430  449  469  489  508  527  548\n",
            "  567  587  606  625  643  660  677  696  716  735  755  774  793  812\n",
            "  832  856  876  895  916  936  955  973  992 1012 1032 1051 1070 1090\n",
            " 1109 1128 1147 1166 1185 1203 1221 1240 1259 1276]\n",
            "(66,)\n",
            "22050\n",
            "[0.         0.         0.         ... 1.8158419  2.3766525  0.96195364]\n",
            "[  37   62   88  113  138  163  189  216  242  268  293  318  342  367\n",
            "  391  415  440  464  493  519  546  573  599  625  649  675  700  724\n",
            "  752  780  809  836  865  890  914  939  964  990 1016 1043 1070 1096\n",
            " 1122 1148 1173 1198 1221 1245 1270]\n",
            "(49,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.27755347 0.47810405 0.22809733]\n",
            "[  53   75   97  122  146  170  193  217  240  264  288  312  335  358\n",
            "  382  404  427  452  475  498  522  545  569  593  617  641  664  686\n",
            "  711  735  758  781  805  829  852  876  901  923  946  968  988 1012\n",
            " 1035 1060 1084 1112 1137 1161 1186 1209 1233 1257]\n",
            "(52,)\n",
            "22050\n",
            "[0.        0.        0.        ... 1.44448   0.9863004 1.4552325]\n",
            "[  21   46   72   96  123  148  173  198  227  253  275  301  327  353\n",
            "  378  403  428  453  482  508  534  557  582  612  638  665  690  716\n",
            "  742  766  787  812  839  865  890  919  945  967  992 1023 1048 1073\n",
            " 1099 1126 1151 1176 1198 1224 1249 1269]\n",
            "(50,)\n",
            "22050\n",
            "[0.         0.         0.         ... 3.8929207  1.6099037  0.47369602]\n",
            "[  27   50   73   96  119  142  165  188  211  234  257  280  303  326\n",
            "  349  372  395  418  442  464  487  510  533  555  579  602  624  647\n",
            "  670  692  715  738  760  782  803  828  851  874  896  919  941  964\n",
            "  983 1005 1029 1053 1076 1099 1127 1151 1173 1197 1219 1243 1266 1290]\n",
            "(56,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.30821177 0.50157964 2.7976646 ]\n",
            "[   9   33   55   77   98  119  139  160  181  202  224  245  266  287\n",
            "  308  329  349  370  390  412  433  456  477  498  519  541  562  583\n",
            "  604  626  647  669  690  712  732  753  776  797  818  840  861  882\n",
            "  904  925  946  967  989 1010 1032 1053 1074 1096 1118 1139 1159 1181\n",
            " 1204 1226 1248 1270]\n",
            "(60,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.41258174 0.7085607  0.47560588]\n",
            "[  68   85  102  119  137  153  170  187  204  221  238  255  273  290\n",
            "  307  324  340  358  375  392  410  428  445  462  479  496  513  530\n",
            "  547  565  582  599  616  633  650  667  684  702  719  735  753  770\n",
            "  787  804  821  839  856  872  889  906  924  941  959  976  994 1011\n",
            " 1028 1045 1062 1080 1097 1114 1131 1148 1166 1183 1200]\n",
            "(67,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.51792073 0.39632863 0.59736013]\n",
            "[  59   83  108  133  158  182  208  233  259  283  308  332  357  381\n",
            "  406  431  455  479  504  528  553  577  601  626  650  674  699  723\n",
            "  748  772  796  821  846  870  894  918  943  967  991 1016 1040 1064\n",
            " 1089 1113 1138 1163 1187 1212 1236 1260]\n",
            "(50,)\n",
            "22050\n",
            "[0.        0.        0.        ... 1.0132843 1.1799018 1.4323584]\n",
            "[   5   33   60   88  116  143  170  197  224  252  279  306  333  361\n",
            "  388  415  441  468  496  523  551  578  604  631  659  687  712  741\n",
            "  769  796  823  851  878  905  933  961  988 1016 1043 1071 1098 1126\n",
            " 1152 1179 1207 1235 1262]\n",
            "(47,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.5990466  0.63219655 0.5076566 ]\n",
            "[  29   53   78  103  132  160  185  211  237  268  293  317  343  368\n",
            "  393  417  442  467  492  516  538  560  582  609  633  657  682  707\n",
            "  731  756  780  806  833  860  886  912  935  958  981 1006 1032 1058\n",
            " 1087 1113 1138 1164 1190 1217 1245 1271]\n",
            "(50,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.7110146  0.6245171  0.43520325]\n",
            "[  35   61   88  113  139  165  191  216  242  268  294  320  346  372\n",
            "  398  424  450  475  500  526  552  578  604  630  656  682  708  734\n",
            "  760  786  812  837  863  889  916  942  967  994 1019 1041 1063 1085\n",
            " 1112 1139 1166 1193 1219 1247 1269]\n",
            "(49,)\n",
            "22050\n",
            "[0.        0.        0.        ... 3.0188577 0.5105081 0.5228031]\n",
            "[  21   45   67   90  113  136  158  181  203  226  249  272  294  316\n",
            "  339  363  386  409  430  453  476  497  518  541  562  584  606  629\n",
            "  651  675  697  719  742  765  787  811  832  856  877  900  922  946\n",
            "  969  992 1014 1038 1062 1086 1108 1131 1153 1175 1197 1221]\n",
            "(54,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.5917204  0.613567   0.88903874]\n",
            "[  39   68   96  125  155  185  213  243  272  301  329  358  387  416\n",
            "  445  475  503  532  561  590  618  647  677  705  734  763  791  819\n",
            "  848  877  905  934  962  991 1020 1048 1078 1106 1136 1166 1194 1223\n",
            " 1252 1281]\n",
            "(44,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.5718601  0.75069845 0.8090925 ]\n",
            "[   3   22   41   61   80   99  119  138  157  177  196  216  234  254\n",
            "  274  294  314  333  352  372  390  410  430  449  469  488  507  526\n",
            "  545  565  588  610  632  653  676  698  719  739  759  780  804  825\n",
            "  844  863  883  905  926  946  965  984 1003 1023 1042 1062 1082 1102\n",
            " 1120 1139 1161 1182 1204 1226 1248 1270]\n",
            "(64,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.8463005  0.52513945 0.5112628 ]\n",
            "[  70   88  105  122  139  157  174  191  208  225  242  259  276  294\n",
            "  310  328  345  362  379  397  414  432  449  466  483  501  518  536\n",
            "  552  570  587  605  622  639  656  674  691  708  725  743  760  778\n",
            "  795  813  830  847  864  882  899  916  933  951  968  986 1003 1020\n",
            " 1037 1055 1071 1089 1106 1123 1140 1157 1174 1192 1208 1226 1243]\n",
            "(69,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.3402694  0.7837337  0.65352833]\n",
            "[  26   48   73   94  114  135  156  177  197  218  239  260  280  301\n",
            "  322  343  363  384  405  426  446  467  488  509  529  550  570  591\n",
            "  612  633  653  673  693  713  734  755  775  796  816  837  858  878\n",
            "  898  919  940  960  981 1002 1022 1043 1064 1085 1105 1126 1147 1168\n",
            " 1188 1209 1230 1251 1272]\n",
            "(61,)\n",
            "22050\n",
            "[0.         0.         0.         ... 1.0472816  1.1712966  0.77838516]\n",
            "[   3   28   54   80  103  130  155  180  205  230  253  279  304  327\n",
            "  354  380  404  431  457  479  504  529  553  576  600  623  646  671\n",
            "  697  723  746  773  800  824  849  874  899  926  951  977 1002 1028\n",
            " 1052 1076 1099 1122 1145 1170 1196 1222 1247]\n",
            "(51,)\n",
            "22050\n",
            "[0.         0.         0.         ... 2.6170526  1.3970213  0.68189013]\n",
            "[  46   64   80   96  112  129  146  163  179  196  212  228  244  261\n",
            "  278  295  311  327  344  360  376  393  410  427  443  459  476  492\n",
            "  508  524  541  558  575  591  607  623  639  656  672  688  705  722\n",
            "  739  755  771  788  805  822  838  856  872  888  904  921  938  954\n",
            "  970  986 1002 1019 1035 1051 1065 1079 1095 1111 1127 1143 1158 1175\n",
            " 1192 1208 1224 1238 1255]\n",
            "(75,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.7196789  0.51926136 0.7735142 ]\n",
            "[  14   28   41   55   69   83   98  113  126  140  155  168  181  195\n",
            "  209  223  236  250  264  278  291  305  319  333  346  360  374  388\n",
            "  402  416  430  444  458  472  486  500  513  527  541  554  568  582\n",
            "  596  610  624  638  652  665  678  692  706  719  733  747  761  776\n",
            "  790  804  817  830  843  857  872  886  900  914  928  941  954  967\n",
            "  982  995 1008 1023 1038 1053 1068 1084 1100 1116 1132 1146 1160 1173\n",
            " 1187 1202 1216 1230 1245]\n",
            "(89,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.14921391 0.14507224 0.27332366]\n",
            "[   8   27   47   67   85  104  124  144  164  183  202  222  242  262\n",
            "  282  302  321  341  361  381  400  419  438  457  477  496  515  535\n",
            "  554  573  592  611  632  652  671  691  710  729  748  768  787  806\n",
            "  826  845  864  883  902  922  941  960  979  998 1017 1036 1055 1075\n",
            " 1094 1114 1132 1151 1171 1191 1210 1229 1248 1268 1288]\n",
            "(67,)\n",
            "22050\n",
            "[0.        0.        0.        ... 7.210807  7.8445716 2.3763742]\n",
            "[  11   36   62   87  112  138  163  187  213  240  261  286  309  332\n",
            "  355  379  405  431  454  479  503  525  547  571  595  619  642  667\n",
            "  694  716  742  768  791  813  836  859  882  905  932  957  981 1003\n",
            " 1026 1048 1070 1093 1118 1143 1166 1191 1216 1239 1266 1290]\n",
            "(54,)\n",
            "22050\n",
            "[0.         0.         0.         ... 6.7141557  2.9427848  0.27162665]\n",
            "[  30   50   70   92  114  138  159  178  196  216  237  259  282  305\n",
            "  324  343  366  384  403  425  448  471  493  515  537  555  574  596\n",
            "  618  639  661  683  704  725  745  766  787  810  831  853  876  895\n",
            "  913  933  953  973  992 1014 1035 1057 1079 1100 1121 1142 1163 1183\n",
            " 1203 1223 1243 1268 1290]\n",
            "(61,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.5985652  0.52319694 0.78405654]\n",
            "[  36   65   95  125  153  182  211  240  268  295  323  351  380  411\n",
            "  438  467  495  523  551  579  607  636  664  691  719  747  774  801\n",
            "  827  855  882  909  936  961  985 1012 1039 1068 1095 1123 1150 1177\n",
            " 1205 1233 1259 1286]\n",
            "(46,)\n",
            "22050\n",
            "[0.        0.        0.        ... 0.8422129 0.6924069 2.4337652]\n",
            "[  33   64   95  126  157  188  219  250  281  312  343  374  405  435\n",
            "  466  497  528  559  589  620  651  682  713  744  774  805  836  867\n",
            "  897  927  958  989 1019 1050 1080 1111 1141 1172 1203 1234 1264]\n",
            "(41,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.50801903 0.5260731  0.59663284]\n",
            "[   3   22   41   60   80   98  117  137  157  176  195  213  233  252\n",
            "  271  289  308  330  349  369  390  411  433  455  476  496  516  539\n",
            "  558  578  598  618  637  657  678  698  719  740  760  779  799  820\n",
            "  839  859  879  898  917  936  955  974  994 1014 1035 1054 1076 1095\n",
            " 1117 1139 1158 1177 1196 1215 1234 1252 1272]\n",
            "(65,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.25512588 0.30238432 0.31605852]\n",
            "[  61   82  103  125  145  166  187  208  229  251  272  294  315  335\n",
            "  356  378  399  420  441  462  483  504  525  547  568  589  610  631\n",
            "  652  673  694  715  736  758  779  800  821  843  864  884  906  927\n",
            "  948  970  991 1012 1033 1054 1075 1096 1117 1139 1160 1181 1202 1223\n",
            " 1244 1265]\n",
            "(58,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.7754202  0.48907685 0.28940588]\n",
            "[  19   35   52   68   84  101  118  134  150  167  184  200  216  233\n",
            "  250  266  282  299  316  332  349  365  382  398  415  432  449  466\n",
            "  482  499  516  532  548  565  582  598  614  631  648  664  680  697\n",
            "  714  731  747  763  780  796  812  829  845  862  879  895  911  928\n",
            "  945  961  979  996 1012 1029 1047 1063 1080 1097 1114 1130 1147 1164\n",
            " 1181 1198 1214]\n",
            "(73,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.1479663  0.05166897 2.1088357 ]\n",
            "[  98  123  148  173  198  223  248  273  297  322  347  373  397  423\n",
            "  447  472  497  522  547  573  598  623  648  673  698  723  748  773\n",
            "  798  823  847  872  897  922  947  972  997 1023 1048 1073 1098 1123\n",
            " 1148 1173 1198 1223 1248 1272]\n",
            "(48,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.45025957 2.9667037  3.3978953 ]\n",
            "[  53   70   88  105  122  139  157  175  192  209  227  244  261  279\n",
            "  297  315  332  349  367  385  402  419  436  453  471  488  506  523\n",
            "  540  558  575  593  610  627  644  662  679  697  714  732  749  767\n",
            "  784  802  819  836  854  871  888  906  923  941  959  976  994 1012\n",
            " 1029 1046 1064 1082 1099 1116 1134 1152 1169 1186 1203 1221 1238]\n",
            "(69,)\n",
            "22050\n",
            "[0.        0.        0.        ... 0.6985131 1.007164  1.9043335]\n",
            "[   8   28   49   70   90  111  132  153  174  195  216  237  257  278\n",
            "  298  319  339  359  380  401  422  443  464  485  506  526  547  567\n",
            "  588  609  630  651  671  691  712  733  754  775  795  816  837  857\n",
            "  878  898  919  940  961  982 1002 1023 1044 1064 1085 1106 1127 1148\n",
            " 1169 1190 1210 1231 1251 1272]\n",
            "(62,)\n",
            "22050\n",
            "[ 0.          0.          0.         ... 14.77661     4.1412287\n",
            "  0.07606491]\n",
            "[  65   82   98  115  131  148  164  181  198  215  231  247  264  282\n",
            "  298  315  332  348  364  380  397  414  430  447  464  480  496  513\n",
            "  530  546  562  579  596  612  629  646  663  679  695  712  729  745\n",
            "  761  778  794  811  827  843  860  876  893  909  926  943  959  976\n",
            "  993 1009 1025 1042 1060 1076 1092 1108 1125 1141 1157 1174 1191 1207\n",
            " 1223 1240 1257 1273 1290]\n",
            "(75,)\n",
            "22050\n",
            "[0.         0.         0.         ... 5.5997787  0.37235844 0.30406225]\n",
            "[  61   78   95  112  130  146  164  181  198  215  233  250  266  283\n",
            "  301  318  335  352  369  386  403  420  437  455  472  488  506  523\n",
            "  540  558  575  592  610  627  644  661  678  695  713  730  747  764\n",
            "  781  798  816  833  850  868  885  902  919  937  954  971  988 1005\n",
            " 1022 1039 1057 1074 1091 1109 1126 1143 1160 1177 1194 1211 1229 1245\n",
            " 1262 1278]\n",
            "(72,)\n",
            "22050\n",
            "[0.        0.        0.        ... 0.3943509 0.8044019 0.8924595]\n",
            "[  15   31   48   65   82   99  116  133  150  167  184  201  219  236\n",
            "  253  270  287  304  321  338  355  372  389  406  422  439  457  473\n",
            "  490  507  525  542  559  576  593  610  627  644  661  677  694  711\n",
            "  728  745  762  779  796  813  830  847  864  881  898  915  932  950\n",
            "  966  983 1000 1017 1034 1051 1068 1085 1101 1118 1136 1153 1170 1187\n",
            " 1204 1220 1237 1253 1270 1287]\n",
            "(76,)\n",
            "22050\n",
            "[0.        0.        0.        ... 1.2171403 3.4366686 5.370989 ]\n",
            "[  43   70   97  124  151  177  204  231  258  285  312  339  366  392\n",
            "  419  446  473  500  527  554  581  608  635  662  689  716  741  768\n",
            "  794  820  847  870  893  915  942  968  995 1022 1050 1077 1103 1130\n",
            " 1157 1184 1211 1239 1265]\n",
            "(47,)\n",
            "22050\n",
            "[ 0.         0.         0.        ... 10.903934   7.1497855  3.253202 ]\n",
            "[  15   30   47   63   79   96  112  128  145  161  178  194  211  227\n",
            "  243  260  276  293  308  325  341  358  374  390  407  423  439  455\n",
            "  472  488  504  521  537  554  570  587  603  619  635  652  668  685\n",
            "  701  718  734  751  767  783  800  817  832  849  865  881  898  914\n",
            "  931  947  963  979  996 1013 1029 1045 1062 1079 1095 1111 1128 1144\n",
            " 1160 1176 1192 1209 1225 1241 1258 1274 1290]\n",
            "(79,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.64271533 2.8049831  3.7379403 ]\n",
            "[  29   49   68   87  107  126  146  165  184  203  223  243  262  281\n",
            "  301  321  340  360  379  398  418  437  456  476  495  515  534  554\n",
            "  573  592  612  632  651  671  690  709  728  748  767  787  806  826\n",
            "  845  864  884  903  923  942  962  981 1000 1020 1039 1059 1078 1098\n",
            " 1117 1137 1156 1176 1195 1214 1234 1253 1273]\n",
            "(65,)\n",
            "22050\n",
            "[0.         0.         0.         ... 1.1824796  0.12668611 4.5268297 ]\n",
            "[  11   36   61   86  109  134  158  183  207  232  256  280  305  330\n",
            "  354  379  403  427  451  475  499  525  549  574  598  622  646  670\n",
            "  695  720  744  769  793  818  842  866  890  915  939  964  988 1012\n",
            " 1036 1060 1081 1101 1122 1146 1170 1195 1219 1244 1268]\n",
            "(53,)\n",
            "22050\n",
            "[0.        0.        0.        ... 2.1491878 4.2221227 2.8568447]\n",
            "[   4   25   45   66   86  107  127  148  168  189  209  230  250  271\n",
            "  291  312  332  353  374  394  414  435  455  476  496  517  537  558\n",
            "  578  598  619  640  660  681  701  722  742  762  783  804  824  844\n",
            "  865  886  906  926  947  968  988 1008 1028 1049 1069 1090 1110 1131\n",
            " 1151 1172 1192 1213 1233 1254 1274]\n",
            "(63,)\n",
            "22050\n",
            "[0.         0.         0.         ... 1.3294427  0.86818963 0.9507157 ]\n",
            "[   9   36   64   92  120  148  176  204  232  260  288  316  344  372\n",
            "  400  428  456  484  513  540  567  596  625  652  681  708  737  764\n",
            "  792  820  849  876  904  932  958  988 1016 1044 1073 1100 1128 1156\n",
            " 1184 1212 1240 1268]\n",
            "(46,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.71711856 0.59276664 0.41844562]\n",
            "[  38   62   86  110  134  158  180  200  223  247  271  295  320  344\n",
            "  368  392  416  439  460  481  505  529  553  577  601  625  646  668\n",
            "  690  714  738  762  786  811  835  863  890  915  940  963  988 1012\n",
            " 1036 1056 1076 1100 1125 1149 1172 1197 1221 1245 1269]\n",
            "(53,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.71487933 0.4954787  1.8389174 ]\n",
            "[  32   57   82  104  128  153  178  202  223  246  269  291  312  337\n",
            "  361  382  406  428  451  474  497  520  542  565  587  610  633  656\n",
            "  678  701  723  746  769  792  815  838  860  883  906  928  951  974\n",
            "  996 1018 1041 1064 1087 1110 1133 1155 1178 1201 1223 1246]\n",
            "(54,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.8188632  0.60644305 0.4504956 ]\n",
            "[ 69  98 126 154 181 209 237 265 293 321 349 377 404 432 460 488 515 544\n",
            " 572 600 627 655 683 711 738 767 795 823 850 878 906 934 962]\n",
            "(33,)\n",
            "22050\n",
            "[0.        0.        0.        ... 0.5489446 0.6085049 0.7639993]\n",
            "[  25   44   63   85  106  126  147  167  188  208  229  249  269  289\n",
            "  310  330  351  372  393  413  432  452  473  493  514  534  554  574\n",
            "  595  615  636  658  677  695  716  737  758  778  799  819  840  860\n",
            "  880  900  921  942  962  982 1003 1023 1042 1063 1083 1103 1124 1145\n",
            " 1165 1186 1206]\n",
            "(59,)\n",
            "22050\n",
            "[0.         0.         0.         ... 1.0852821  0.72911894 0.7821448 ]\n",
            "[  14   28   44   60   75   90  106  121  136  152  167  183  198  214\n",
            "  229  244  260  275  290  305  321  336  352  367  381  397  413  429\n",
            "  444  459  474  489  505  520  536  551  566  582  598  613  628  643\n",
            "  659  674  690  705  720  736  751  766  782  797  813  828  843  858\n",
            "  874  889  904  920  935  951  966  982  997 1012 1028 1043 1058 1074\n",
            " 1089 1104 1120 1135 1151 1166 1181 1197 1212 1228 1243 1258]\n",
            "(82,)\n",
            "22050\n",
            "[0.         0.         0.         ... 1.2138355  0.86991495 1.0895016 ]\n",
            "[  22   47   72   96  121  145  170  194  219  244  268  293  317  342\n",
            "  366  391  415  440  464  489  513  538  562  587  611  636  660  686\n",
            "  710  735  759  784  808  833  857  882  906  931  955  980 1004 1029\n",
            " 1053]\n",
            "(43,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.5269889  0.58729094 1.5542442 ]\n",
            "[  71   98  126  153  181  208  235  262  291  317  346  373  400  427\n",
            "  455  482  509  536  564  592  620  648  676  703  731  758  786  813\n",
            "  841  868  897  925  953  979 1006 1035 1061 1088 1114 1136 1161 1184\n",
            " 1211 1239 1266]\n",
            "(45,)\n",
            "22050\n",
            "[0.        0.        0.        ... 1.4116989 1.9575366 0.3969034]\n",
            "[   3   19   36   52   69   85  102  119  135  151  168  184  201  217\n",
            "  234  251  267  284  301  317  333  350  366  383  399  416  433  450\n",
            "  466  483  499  516  532  549  565  582  598  615  631  648  665  682\n",
            "  698  714  731  748  764  780  797  814  830  847  864  881  898  914\n",
            "  931  948  964  980  997 1013 1029 1046 1062 1079 1096 1113 1129 1145\n",
            " 1162 1178 1195 1212 1228 1245 1261 1278]\n",
            "(78,)\n",
            "22050\n",
            "[0.        0.        0.        ... 4.2433567 6.705103  2.076938 ]\n",
            "[  38   62   85  107  131  154  177  200  223  246  268  291  315  338\n",
            "  360  384  407  430  454  477  501  524  547  570  594  617  640  662\n",
            "  686  710  732  755  779  802  825  848  872  895  918  941  963  986\n",
            " 1010 1033 1057 1080 1103 1126 1150 1173 1197 1220 1244 1267 1291]\n",
            "(55,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.7763505  0.7955741  0.72487843]\n",
            "[   3   30   57   83  110  136  163  190  217  243  271  298  324  351\n",
            "  378  404  429  455  482  508  536  562  589  615  642  668  695  721\n",
            "  747  774  800  825  851  877  902  930  956  982 1008 1035 1061 1087\n",
            " 1113 1139 1165 1191 1217 1242 1268]\n",
            "(49,)\n",
            "22050\n",
            "[0.        0.        0.        ... 0.443759  0.5345345 1.4237568]\n",
            "[  20   39   58   78   97  116  134  153  173  192  210  228  246  263\n",
            "  281  299  319  338  357  375  394  413  431  450  468  487  506  525\n",
            "  543  562  580  598  616  635  654  673  691  710  728  747  765  783\n",
            "  802  824  841  859  879  897  916  935  953  972  991 1011 1029 1048\n",
            " 1067 1086 1105 1124 1143 1165 1184 1203 1221 1237 1254]\n",
            "(67,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.72440135 2.1550686  4.8659315 ]\n",
            "[  18   35   52   69   86  103  120  137  153  170  187  203  220  237\n",
            "  254  270  287  304  320  337  354  371  388  404  421  437  453  469\n",
            "  486  503  520  537  553  570  586  603  620  637  654  671  687  704\n",
            "  721  738  755  772  789  806  823  839  856  873  889  906  923  940\n",
            "  956  973  990 1007 1024 1041 1058 1075 1091 1108 1124 1141 1158 1175\n",
            " 1191 1208 1225 1241 1258 1275 1292]\n",
            "(77,)\n",
            "22050\n",
            "[0.         0.         0.         ... 0.66532487 0.8518585  0.6907585 ]\n",
            "[  23   44   66   87  108  130  152  173  195  217  238  259  281  301\n",
            "  323  345  367  388  409  430  452  472  492  512  532  552  572  594\n",
            "  615  637  658  679  700  723  745  767  787  809  829  851  874  896\n",
            "  918  939  958  980 1002 1024 1045 1067 1089 1110 1131 1152 1174 1196\n",
            " 1217 1236]\n",
            "(58,)\n",
            "22050\n",
            "[0.        0.        0.        ... 0.7830592 1.1261908 0.9057038]\n",
            "[   3   21   39   57   76   93  109  126  142  159  176  193  209  226\n",
            "  242  259  276  292  310  328  345  361  378  395  412  428  445  462\n",
            "  479  496  512  528  545  561  579  597  614  631  648  665  682  698\n",
            "  714  732  749  765  781  798  815  833  852  870  887  904  921  936\n",
            "  954  973  990 1007 1024 1041 1058 1075 1092 1109 1126 1143 1160 1177\n",
            " 1194 1211 1228 1246 1263 1278]\n",
            "(76,)\n",
            "22050\n",
            "[0.        0.        0.        ... 1.640498  1.8804682 2.1577432]\n",
            "[   3   25   47   68   90  112  134  156  178  199  221  243  265  287\n",
            "  309  331  352  374  396  418  440  462  483  506  528  550  573  595\n",
            "  618  640  662  684  707  728  751  773  795  817  839  861  884  906\n",
            "  927  949  971  993 1014 1036 1058 1080 1102 1124 1146 1168 1191 1213\n",
            " 1235 1257]\n",
            "(58,)\n",
            "22050\n",
            "[0.         0.         0.         ... 2.0750766  0.8344569  0.61795235]\n",
            "[  36   60   82  105  128  151  174  196  219  242  265  288  310  333\n",
            "  356  379  401  424  446  469  492  515  537  561  583  606  629  652\n",
            "  674  697  720  743  765  788  811  834  857  880  903  925  947  970\n",
            "  993 1016 1039 1062 1084 1107 1130 1152 1175 1198 1221 1244 1267 1289]\n",
            "(56,)\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-22-27f225778afc>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mscores_sf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mu\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate_estimated_beats\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mestimated_beats_sf\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mestimated_beats_ml\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_estimated_beats\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"machine_learning\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mscores_ml\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mu\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mevaluate_estimated_beats\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mestimated_beats_ml\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/content/drive/MyDrive/MIR/HW2/auxiliary.py\u001b[0m in \u001b[0;36mget_estimated_beats\u001b[0;34m(data, method)\u001b[0m\n\u001b[1;32m     55\u001b[0m             \u001b[0mest_beat_times\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mestimate_beats_spectral_flux\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrack\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maudio_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     56\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0mmethod\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"machine_learning\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 57\u001b[0;31m             \u001b[0mest_beat_times\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mestimate_beats_madmom\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrack\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maudio_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     58\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     59\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Invalid method. Choose either 'spectral_flux' or 'machine_learning'.\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/content/drive/MyDrive/MIR/HW2/auxiliary.py\u001b[0m in \u001b[0;36mestimate_beats_madmom\u001b[0;34m(audio_path)\u001b[0m\n\u001b[1;32m     30\u001b[0m     \u001b[0;31m# use RNNBeatProcessor() from madmom to obtain an activation function\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m     \u001b[0mproc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmadmom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbeats\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mRNNBeatProcessor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m     \u001b[0mact\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mproc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m     \u001b[0;31m# use DBNBeatTrackingProcessor from madmom to obtain the beat time stamps\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m     \u001b[0mdbn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmadmom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfeatures\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbeats\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mDBNBeatTrackingProcessor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfps\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m100\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/madmom/processors.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    112\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    113\u001b[0m         \u001b[0;31m# this magic method makes a Processor callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 114\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprocess\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    115\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/madmom/processors.py\u001b[0m in \u001b[0;36mprocess\u001b[0;34m(self, data, **kwargs)\u001b[0m\n\u001b[1;32m    416\u001b[0m         \u001b[0;31m# sequentially process the data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    417\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mprocessor\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprocessors\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 418\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprocessor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    419\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    420\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/madmom/processors.py\u001b[0m in \u001b[0;36m_process\u001b[0;34m(process_tuple)\u001b[0m\n\u001b[1;32m    281\u001b[0m     \u001b[0;31m# call the Processor with data and kwargs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    282\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprocess_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mProcessor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 283\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mprocess_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mprocess_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mprocess_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    284\u001b[0m     \u001b[0;31m# just call whatever we got here (e.g. a function) without kwargs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    285\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mprocess_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mprocess_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/madmom/processors.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    112\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    113\u001b[0m         \u001b[0;31m# this magic method makes a Processor callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 114\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprocess\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    115\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/madmom/processors.py\u001b[0m in \u001b[0;36mprocess\u001b[0;34m(self, data, **kwargs)\u001b[0m\n\u001b[1;32m    416\u001b[0m         \u001b[0;31m# sequentially process the data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    417\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mprocessor\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprocessors\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 418\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_process\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprocessor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    419\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    420\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/madmom/processors.py\u001b[0m in \u001b[0;36m_process\u001b[0;34m(process_tuple)\u001b[0m\n\u001b[1;32m    281\u001b[0m     \u001b[0;31m# call the Processor with data and kwargs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    282\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprocess_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mProcessor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 283\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mprocess_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mprocess_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mprocess_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    284\u001b[0m     \u001b[0;31m# just call whatever we got here (e.g. a function) without kwargs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    285\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mprocess_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mprocess_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/madmom/processors.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    112\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    113\u001b[0m         \u001b[0;31m# this magic method makes a Processor callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 114\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprocess\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    115\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/madmom/processors.py\u001b[0m in \u001b[0;36mprocess\u001b[0;34m(self, data, **kwargs)\u001b[0m\n\u001b[1;32m    476\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0m_process\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprocessors\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    477\u001b[0m         \u001b[0;31m# process data in parallel and return a list with processed data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 478\u001b[0;31m         return list(self.map(_process, zip(self.processors, it.repeat(data),\n\u001b[0m\u001b[1;32m    479\u001b[0m                                            it.repeat(kwargs))))\n\u001b[1;32m    480\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/madmom/processors.py\u001b[0m in \u001b[0;36m_process\u001b[0;34m(process_tuple)\u001b[0m\n\u001b[1;32m    281\u001b[0m     \u001b[0;31m# call the Processor with data and kwargs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    282\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprocess_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mProcessor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 283\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mprocess_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mprocess_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mprocess_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    284\u001b[0m     \u001b[0;31m# just call whatever we got here (e.g. a function) without kwargs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    285\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mprocess_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mprocess_tuple\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/madmom/processors.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m    112\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__call__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    113\u001b[0m         \u001b[0;31m# this magic method makes a Processor callable\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 114\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprocess\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    115\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/madmom/ml/nn/__init__.py\u001b[0m in \u001b[0;36mprocess\u001b[0;34m(self, data, reset, **kwargs)\u001b[0m\n\u001b[1;32m    116\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mlayer\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    117\u001b[0m             \u001b[0;31m# activate the layer and feed the output into the next one\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 118\u001b[0;31m             \u001b[0mdata\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlayer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreset\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mreset\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    119\u001b[0m         \u001b[0;31m# squeeze predictions to contain only true dimensions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    120\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/madmom/ml/nn/layers.cpython-310-x86_64-linux-gnu.so\u001b[0m in \u001b[0;36mmadmom.ml.nn.layers.Layer.__call__\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/madmom/ml/nn/layers.cpython-310-x86_64-linux-gnu.so\u001b[0m in \u001b[0;36mmadmom.ml.nn.layers.BidirectionalLayer.activate\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/numpy/core/shape_base.py\u001b[0m in \u001b[0;36mhstack\u001b[0;34m(tup, dtype, casting)\u001b[0m\n\u001b[1;32m    357\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0m_nx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcasting\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcasting\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    358\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 359\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0m_nx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mconcatenate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcasting\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcasting\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    360\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    361\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np"
      ],
      "metadata": {
        "id": "Z1SmoMzl6tri"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scores_ml = scores_sf\n",
        "estimated_beats_ml = estimated_beats_sf"
      ],
      "metadata": {
        "id": "BHlgzMeAqtD0"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Run this code to test your dictionaries\n",
        "example_trackid = \"rock.00007\"\n",
        "print(\"The spectral flux beats f-measure for {} is {:.2f}\".format(example_trackid, scores_sf[example_trackid]))\n",
        "print(\"The machine learned beats f-measure for {} is {:.2f}\".format(example_trackid, scores_ml[example_trackid]))\n",
        "print(\"\")\n",
        "\n",
        "print(\"The average f-measure for spectral flux beats is {:.2f}\".format(np.mean(list(scores_sf.values()))))\n",
        "print(\"The average f-measure for machine learned beats is {:.2f}\".format(np.mean(list(scores_ml.values()))))"
      ],
      "metadata": {
        "id": "QrDdUo7QXSNU",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cf19fe05-3246-4d13-9b8a-1dfa508813a3"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The spectral flux beats f-measure for rock.00007 is 0.99\n",
            "The machine learned beats f-measure for rock.00007 is 0.99\n",
            "\n",
            "The average f-measure for spectral flux beats is 0.75\n",
            "The average f-measure for machine learned beats is 0.75\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pickle"
      ],
      "metadata": {
        "id": "KTr0ebFn1lP5"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Save the dictionaries so you don't have to compute them each time.\n",
        "# Uncomment the lines below to do so.\n",
        "\n",
        "with open('scores_sf.pkl', 'wb') as f:\n",
        "    pickle.dump(scores_sf, f)\n",
        "\n",
        "with open('estimated_beats_sf.pkl', 'wb') as f:\n",
        "    pickle.dump(estimated_beats_sf, f)\n",
        "\n",
        "with open('scores_ml.pkl', 'wb') as f:\n",
        "    pickle.dump(scores_ml, f)\n",
        "\n",
        "with open('estimated_beats_ml.pkl', 'wb') as f:\n",
        "    pickle.dump(estimated_beats_ml, f)\n"
      ],
      "metadata": {
        "id": "0VT-Ylz4y5My"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Load scores_sf and estimations\n",
        "with open('scores_sf.pkl', 'rb') as f:\n",
        "    scores_sf = pickle.load(f)\n",
        "\n",
        "with open('estimated_beats_sf.pkl', 'rb') as f:\n",
        "    estimated_beats_sf = pickle.load(f)\n",
        "\n",
        "# Load scores_ml and estimations\n",
        "with open('scores_ml.pkl', 'rb') as f:\n",
        "    scores_ml = pickle.load(f)\n",
        "\n",
        "with open('estimated_beats_ml.pkl', 'rb') as f:\n",
        "    estimated_beats_ml = pickle.load(f)"
      ],
      "metadata": {
        "id": "N7qqffdwzTdp"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Part 4: Break down results\n",
        "\n",
        "\n",
        "When you measure an algorithm's performance on a dataset, you are often computing scores per track. It's useful to look at the spread of performance across tracks, and to split the data into groups and look at the differences in performance.\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "We are going to look at the following plots:\n",
        "\n",
        "1. **Overall scores:** A single figure with two boxplots. One using the scores for all tracks for SF beats and one for ML beats. Some examples [here](https://matplotlib.org/stable/gallery/pyplots/boxplot_demo_pyplot.html).\n",
        "2. **Scores by genre:** A figure with two subplots (one row, two columns). The subplots should share the y-axis. The top subplot should have scores for SF beats and the bottom one for ML beats. Each subplot should contain boxplots  where each boxplot is computed for each genre (f-measure in y-axis and genre in x-axis).\n",
        "3. **Scores by tempo:** A figure with two subplots (one row, two columns). The left subplot should have scores for SF beats and the right for ML beats. Each subplot should contain one **scatter plot** (not a boxplot), which has tempo in BPM as the x-axis and f-measure as the y-axis.\n",
        "\n",
        "The code to plot is provided to you below, but you need to splt the performance scores into groups by completing the functions in `utils.py`.\n",
        "\n"
      ],
      "metadata": {
        "id": "-X4FPESkXgVB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "bZ7hyNzzvbMJ"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Overall scores figure\n",
        "overall_scores = [list(scores_sf.values()), list(scores_ml.values())]\n",
        "\n",
        "# Overall scores figure\n",
        "a.plot_overall_scores(overall_scores)\n"
      ],
      "metadata": {
        "id": "4Z8l-_XuXeVh",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        },
        "outputId": "3579e7f6-e955-4d1a-9643-74776a96e0e7"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "error",
          "ename": "OSError",
          "evalue": "'seaborn-whitegrid' is not a valid package style, path of style file, URL of style file, or library style name (library styles are listed in `style.available`)",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/style/core.py\u001b[0m in \u001b[0;36muse\u001b[0;34m(style)\u001b[0m\n\u001b[1;32m    136\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 137\u001b[0;31m                 \u001b[0mstyle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_rc_params_in_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstyle\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    138\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mOSError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36m_rc_params_in_file\u001b[0;34m(fname, transform, fail_on_error)\u001b[0m\n\u001b[1;32m    865\u001b[0m     \u001b[0mrc_temp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 866\u001b[0;31m     \u001b[0;32mwith\u001b[0m \u001b[0m_open_file_or_url\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfname\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfd\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    867\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/lib/python3.10/contextlib.py\u001b[0m in \u001b[0;36m__enter__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    134\u001b[0m         \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 135\u001b[0;31m             \u001b[0;32mreturn\u001b[0m \u001b[0mnext\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgen\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    136\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mStopIteration\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/__init__.py\u001b[0m in \u001b[0;36m_open_file_or_url\u001b[0;34m(fname)\u001b[0m\n\u001b[1;32m    842\u001b[0m         \u001b[0mfname\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexpanduser\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfname\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 843\u001b[0;31m         \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'utf-8'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    844\u001b[0m             \u001b[0;32myield\u001b[0m \u001b[0mf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'seaborn-whitegrid'",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[0;31mOSError\u001b[0m                                   Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-33-752dbb2595e7>\u001b[0m in \u001b[0;36m<cell line: 5>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# Overall scores figure\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot_overall_scores\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0moverall_scores\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/content/drive/MyDrive/MIR/HW2/auxiliary.py\u001b[0m in \u001b[0;36mplot_overall_scores\u001b[0;34m(overall_scores)\u001b[0m\n\u001b[1;32m    212\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    213\u001b[0m     \u001b[0;31m# Set style\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 214\u001b[0;31m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstyle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0muse\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'seaborn-whitegrid'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    215\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    216\u001b[0m     \u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplots\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/matplotlib/style/core.py\u001b[0m in \u001b[0;36muse\u001b[0;34m(style)\u001b[0m\n\u001b[1;32m    137\u001b[0m                 \u001b[0mstyle\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_rc_params_in_file\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstyle\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    138\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mOSError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 139\u001b[0;31m                 raise OSError(\n\u001b[0m\u001b[1;32m    140\u001b[0m                     \u001b[0;34mf\"{style!r} is not a valid package style, path of style \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m                     \u001b[0;34mf\"file, URL of style file, or library style name (library \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mOSError\u001b[0m: 'seaborn-whitegrid' is not a valid package style, path of style file, URL of style file, or library style name (library styles are listed in `style.available`)"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "genre_scores_sf = u.split_by_genre(scores_sf, data)\n",
        "genre_scores_ml = u.split_by_genre(scores_ml, data)\n",
        "\n",
        "# Scores by genre figure\n",
        "a.plot_scores_by_genre(genre_scores_sf, genre_scores_ml)"
      ],
      "metadata": {
        "id": "NNkMEl6rXYTh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "tempo_sf, score_by_tempo_sf = u.get_tempo_vs_performance(scores_sf, data)\n",
        "tempo_ml, score_by_tempo_ml = u.get_tempo_vs_performance(scores_ml, data)\n",
        "\n",
        "# Scores by tempo figure\n",
        "a.plot_scores_by_tempo(tempo_sf, score_by_tempo_sf, tempo_ml, score_by_tempo_ml)"
      ],
      "metadata": {
        "id": "I4IHC_-TZEp5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Part 5: Look at individual results\n",
        "\n",
        "\n",
        "\n",
        "Write a function that given a track_id from the GTZAN sonifies estimated beats. See the function docstring for details.\n"
      ],
      "metadata": {
        "id": "t6aUqchUIIHj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# run this and the cells below\n",
        "best_track_sf = max(scores_sf, key=scores_sf.get)  # the track with the best score for SF Beats\n",
        "best_track_ml = max(scores_ml, key=scores_ml.get)  # the track with the best score for ML Beats\n",
        "worst_track_sf = min(scores_sf, key=scores_sf.get)  # the track with the worst score for SF Beats\n",
        "worst_track_ml = min(scores_ml, key=scores_ml.get)  # the track with the worst score for ML Beats"
      ],
      "metadata": {
        "id": "Nmf2m7OpgVMn"
      },
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plot_data = a.compute_track_data(best_track_sf, data)\n",
        "a.plot_track_data(plot_data)\n",
        "\n",
        "print(\"\")\n",
        "print(f'For this track, SF method has an F-measure of {scores_sf[best_track_sf]}')\n",
        "print(f'For this track, ML method has an F-measure of {scores_ml[best_track_sf]}')\n",
        "print(\"\")\n",
        "u.sonify_track_data(best_track_sf, estimated_beats_sf, data)\n",
        "u.sonify_track_data(best_track_sf, estimated_beats_ml, data)"
      ],
      "metadata": {
        "id": "VXvQ4uruZkWf",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "outputId": "1305e542-cf01-410d-a1be-6c364b3d4d26"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "22050\n",
            "[0.        0.        0.        ... 1.0146718 1.0183605 0.8223357]\n",
            "[   8   27   48   68   88  107  127  147  167  187  207  226  246  266\n",
            "  285  305  325  345  364  384  404  424  444  464  484  504  523  543\n",
            "  563  583  602  622  642  662  682  701  722  742  761  781  801  821\n",
            "  841  861  880  900  920  940  959  979 1000 1020 1039 1059 1079 1099\n",
            " 1119 1138 1158 1178 1197 1217 1237 1257 1277 1297]\n",
            "(66,)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "For this track, SF method has an F-measure of 1.0\n",
            "For this track, ML method has an F-measure of 1.0\n",
            "\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "clicks() got an unexpected keyword argument 'sr'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-36-802936f10ce4>\u001b[0m in \u001b[0;36m<cell line: 8>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf'For this track, ML method has an F-measure of {scores_ml[best_track_sf]}'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mu\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msonify_track_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbest_track_sf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mestimated_beats_sf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0mu\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msonify_track_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbest_track_sf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mestimated_beats_ml\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/content/drive/MyDrive/MIR/HW2/utils.py\u001b[0m in \u001b[0;36msonify_track_data\u001b[0;34m(track_id, estimated_beats, tracks_dictionary)\u001b[0m\n\u001b[1;32m    223\u001b[0m     \u001b[0mest_beats\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mestimated_beats\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrack_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    224\u001b[0m     \u001b[0;31m# 3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 225\u001b[0;31m     \u001b[0mclick_estimated\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmir_eval\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msonify\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mclicks\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mest_beats\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msr\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    226\u001b[0m     \u001b[0;31m#Get ref beats\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    227\u001b[0m     \u001b[0mreference_beats\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtrack\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbeats\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimes\u001b[0m  \u001b[0;31m# Assuming reference beats are stored in the track object\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mTypeError\u001b[0m: clicks() got an unexpected keyword argument 'sr'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plot_data = a.compute_track_data(best_track_ml, data)\n",
        "a.plot_track_data(plot_data)\n",
        "\n",
        "print(\"\")\n",
        "print(f'For this track, SF method has an F-measure of {scores_sf[best_track_ml]}')\n",
        "print(f'For this track, ML method has an F-measure of {scores_ml[best_track_ml]}')\n",
        "print(\"\")\n",
        "\n",
        "u.sonify_track_data(best_track_ml, estimated_beats_sf, data)\n",
        "u.sonify_track_data(best_track_ml, estimated_beats_ml, data)"
      ],
      "metadata": {
        "id": "eiwI6DtbH0U5"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plot_data = a.compute_track_data(worst_track_sf, data)\n",
        "a.plot_track_data(plot_data)\n",
        "\n",
        "print(\"\")\n",
        "print(f'For this track, SF method has an F-measure of {scores_sf[worst_track_sf]}')\n",
        "print(f'For this track, ML method has an F-measure of {scores_ml[worst_track_sf]}')\n",
        "print(\"\")\n",
        "\n",
        "u.sonify_track_data(best_track_sf, estimated_beats_sf, data)\n",
        "u.sonify_track_data(best_track_sf, estimated_beats_ml, data)"
      ],
      "metadata": {
        "id": "lEb3pRzJH4gi"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plot_data = a.compute_track_data(worst_track_ml, data)\n",
        "a.plot_track_data(plot_data)\n",
        "\n",
        "print(\"\")\n",
        "print(f'For this track, SF method has an F-measure of {scores_sf[worst_track_ml]}')\n",
        "print(f'For this track, ML method has an F-measure of {scores_ml[worst_track_ml]}')\n",
        "print(\"\")\n",
        "\n",
        "u.sonify_track_data(worst_track_ml, estimated_beats_sf, data)\n",
        "u.sonify_track_data(worst_track_ml, estimated_beats_ml, data)"
      ],
      "metadata": {
        "id": "YHSDwhTfIG1s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Part 6: Analysis\n",
        "\n",
        "\n",
        "Using the plots from part 4 and part 5, identify 2 different trends (e.g. if one algorithm performs better than the other overall, if one algorithm performs better on different splits than others, if there are systematic errors, etc). Use additional evaluation metrics (e.g. cemgil, continuity metrics) to explain what is going on.\n",
        "\n",
        "For each trend, write a short paragraph discussing what is happening and why you think it might be occuring."
      ],
      "metadata": {
        "id": "z3MoXzHY8uJm"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Trend 1\n",
        "\n",
        "\n",
        "`# YOUR RESPONSE HERE`"
      ],
      "metadata": {
        "id": "MwO7xyfKcso2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Trend 2\n",
        "\n",
        "\n",
        "`# YOUR RESPONSE HERE`"
      ],
      "metadata": {
        "id": "UOrTIqfIczsr"
      }
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.12"
    },
    "colab": {
      "provenance": [],
      "gpuType": "V28"
    },
    "accelerator": "TPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
